class UserUpdate < ActiveRecord::Base
  # Update class: Represents an update generated by a user.
  # 
  # Currently the following types of updates are planned.
  # :text   - General text update.
  # :html   - A static HTML formatted update.
  # :friend - Friendship update.
  # :star   - Giving a star rating to a title.
  # :review - Adding a new review.
  # :stash  - Adding a title to a stash.
  # :comment - Comment posted to a update, review.
  
  #attr_accessible :message, :update_type, :friend_id, :title_id, :update_id

  belongs_to :user
  belongs_to :friend, :foreign_key => "friend_id", :class_name => "User"
  belongs_to :title,  :foreign_key => "title_id"
  belongs_to :update, :foreign_key => "update_id", :class_name => "UserUpdate"
  ## Validate for length only if its a general text update posted by user.
  validates  :message, :length => {:minimum => 20}, :if => Proc.new{|update| update.text? }

  default_scope :conditions => "user_updates.enabled = 1", :order => "user_updates.created_at DESC", :include => [:friend, :title, :update]
  scope :from_users_followed_by, lambda {|user| followed_by(user) }

  def text?; update_type.eql?('text'); end
  def html?; update_type.eql?('html'); end
  def friend?; update_type.eql?('friend'); end
  def star?; update_type.eql?('star'); end
  def review?; update_type.eql?('review'); end
  def stash?; update_type.eql?('stash'); end
  def comment?; update_type.eql?('comment'); end

  private
  
  ## Returns an SQL condition for users whose updates 
  ## must be included.
  def self.followed_by(user)
    followed_ids = %(SELECT followed_id FROM relationships WHERE follower_id = :user_id)
    where("user_updates.user_id IN (#{followed_ids}) OR user_updates.user_id = :user_id", {:user_id => user})
  end

end
